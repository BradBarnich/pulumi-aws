// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package transfer

import (
	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/go/pulumi"
)

// Provides a AWS Transfer User SSH Key resource.
// 
// 
// ```hcl
// resource "aws_transfer_server" "foo" {
// 	identity_provider_type = "SERVICE_MANAGED"
// 
// 	tags {
// 		NAME     = "tf-acc-test-transfer-server"
// 	}
// }
// 
// 
// resource "aws_iam_role" "foo" {
// 	name = "tf-test-transfer-user-iam-role-%s"
// 
// 	assume_role_policy = <<EOF
// {
// 	"Version": "2012-10-17",
// 	"Statement": [
// 		{
// 		"Effect": "Allow",
// 		"Principal": {
// 			"Service": "transfer.amazonaws.com"
// 		},
// 		"Action": "sts:AssumeRole"
// 		}
// 	]
// }
// EOF
// }
// 
// resource "aws_iam_role_policy" "foo" {
// 	name = "tf-test-transfer-user-iam-policy-%s"
// 	role = "${aws_iam_role.foo.id}"
// 	policy = <<POLICY
// {
// 	"Version": "2012-10-17",
// 	"Statement": [
// 		{
// 			"Sid": "AllowFullAccesstoS3",
// 			"Effect": "Allow",
// 			"Action": [
// 				"s3:*"
// 			],
// 			"Resource": "*"
// 		}
// 	]
// }
// POLICY
// }
// 
// 
// resource "aws_transfer_user" "foo" {
// 	server_id      = "${aws_transfer_server.foo.id}"
// 	user_name      = "tftestuser"
// 	role           = "${aws_iam_role.foo.arn}"
// 
// 	tags {
// 		NAME = "tftestuser"
// 	}
// }
// 
// resource "aws_transfer_ssh_key" "foo" {
// 	server_id = "${aws_transfer_server.foo.id}"
// 	user_name = "${aws_transfer_user.foo.user_name}"
// 	body 	  = "ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQD3F6tyPEFEzV0LX3X8BsXdMsQz1x2cEikKDEY0aIj41qgxMCP/iteneqXSIFZBp5vizPvaoIR3Um9xK7PGoW8giupGn+EPuxIA4cDM4vzOqOkiMPhz5XK0whEjkVzTo4+S0puvDZuwIsdiW9mxhJc7tgBNL0cYlWSYVkz4G/fslNfRPW5mYAM49f4fhtxPb5ok4Q2Lg9dPKVHO/Bgeu5woMc7RY0p1ej6D4CKFE6lymSDJpW0YHX/wqE9+cfEauh7xZcG0q9t2ta6F6fmX0agvpFyZo8aFbXeUBr7osSCJNgvavWbM/06niWrOvYX2xwWdhXmXSrbX8ZbabVohBK41 example@example.com"
// }
// 
// ```
type SshKey struct {
	s *pulumi.ResourceState
}

// NewSshKey registers a new resource with the given unique name, arguments, and options.
func NewSshKey(ctx *pulumi.Context,
	name string, args *SshKeyArgs, opts ...pulumi.ResourceOpt) (*SshKey, error) {
	if args == nil || args.Body == nil {
		return nil, errors.New("missing required argument 'Body'")
	}
	if args == nil || args.ServerId == nil {
		return nil, errors.New("missing required argument 'ServerId'")
	}
	if args == nil || args.UserName == nil {
		return nil, errors.New("missing required argument 'UserName'")
	}
	inputs := make(map[string]interface{})
	if args == nil {
		inputs["body"] = nil
		inputs["serverId"] = nil
		inputs["userName"] = nil
	} else {
		inputs["body"] = args.Body
		inputs["serverId"] = args.ServerId
		inputs["userName"] = args.UserName
	}
	s, err := ctx.RegisterResource("aws:transfer/sshKey:SshKey", name, true, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &SshKey{s: s}, nil
}

// GetSshKey gets an existing SshKey resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetSshKey(ctx *pulumi.Context,
	name string, id pulumi.ID, state *SshKeyState, opts ...pulumi.ResourceOpt) (*SshKey, error) {
	inputs := make(map[string]interface{})
	if state != nil {
		inputs["body"] = state.Body
		inputs["serverId"] = state.ServerId
		inputs["userName"] = state.UserName
	}
	s, err := ctx.ReadResource("aws:transfer/sshKey:SshKey", name, id, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &SshKey{s: s}, nil
}

// URN is this resource's unique name assigned by Pulumi.
func (r *SshKey) URN() *pulumi.URNOutput {
	return r.s.URN()
}

// ID is this resource's unique identifier assigned by its provider.
func (r *SshKey) ID() *pulumi.IDOutput {
	return r.s.ID()
}

// The public key portion of an SSH key pair.
func (r *SshKey) Body() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["body"])
}

// The Server ID of the Transfer Server (e.g. `s-12345678`)
func (r *SshKey) ServerId() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["serverId"])
}

// The name of the user account that is assigned to one or more servers.
func (r *SshKey) UserName() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["userName"])
}

// Input properties used for looking up and filtering SshKey resources.
type SshKeyState struct {
	// The public key portion of an SSH key pair.
	Body interface{}
	// The Server ID of the Transfer Server (e.g. `s-12345678`)
	ServerId interface{}
	// The name of the user account that is assigned to one or more servers.
	UserName interface{}
}

// The set of arguments for constructing a SshKey resource.
type SshKeyArgs struct {
	// The public key portion of an SSH key pair.
	Body interface{}
	// The Server ID of the Transfer Server (e.g. `s-12345678`)
	ServerId interface{}
	// The name of the user account that is assigned to one or more servers.
	UserName interface{}
}
